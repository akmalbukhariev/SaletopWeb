src/
├─ app/                        # Ilovaning "qobig‘i" va kirish nuqtasi
│  ├─ App.tsx                  # Asosiy React komponent (root component)
│  ├─ main.tsx                 # ReactDOM orqali App ni DOM ga ulash
│  ├─ routes.tsx               # Marshrut (routing) konfiguratsiyasi (lazy load bilan)
│  └─ providers/               # Yuqori darajadagi provider’lar (butun app uchun)
│     ├─ ThemeProvider.tsx     # MUI theme va rang rejimi (dark/light) boshqaruvchisi
│     ├─ QueryProvider.tsx     # TanStack Query provider (serverdan data boshqarish uchun, ixtiyoriy)
│     └─ I18nProvider.tsx      # I18n (ko‘p tillilik) provider, ixtiyoriy
│
├─ core/                       # Infrastruktura va "cross-cutting concerns" (butun app bo‘yicha umumiy xizmatlar)
│  ├─ api/
│  │  ├─ apiClient.ts          # Axios instance va interceptor’lar (so‘rovlarni markazdan boshqarish)
│  │  └─ endpoints.ts          # API endpointlarni markazlashtirib saqlash
│  ├─ auth/
│  │  ├─ auth.guard.tsx        # Route guard (faqat login bo‘lsa sahifaga kiritadi)
│  │  └─ token.ts              # Token’ni olish/saqlash/yangilash funksiyalari
│  ├─ config/
│  │  └─ env.ts                # Muhit sozlamalari (`.env`) ni typed qilib olish
│  ├─ errors/
│  │  ├─ ErrorBoundary.tsx     # React Error Boundary (xatoni tutib foydalanuvchiga ko‘rsatish)
│  │  └─ errorMapping.ts       # Serverdan kelgan xatoni foydalanuvchi uchun tushunarli matnga o‘girish
│  └─ storage/
│     └─ local.ts              # LocalStorage / SessionStorage helper funksiyalari
│
├─ shared/                     # Framework’dan mustaqil qayta foydalaniladigan bloklar
│  ├─ ui/                      # Umumiy UI komponentlar (atom/molecule darajasida)
│  │  ├─ DataTable/            # Jadval uchun umumiy komponent
│  │  ├─ FormTextField.tsx     # Input uchun qayta ishlatiladigan form component
│  │  └─ Section.tsx           # Bo‘lim/sahifa layout elementi
│  ├─ forms/                   # Zod schemas va form resolvers (validation uchun)
│  ├─ hooks/                   # Umumiy hook’lar (masalan: useDebounce, usePagination)
│  ├─ utils/                   # Foydali funksiyalar (formatter, sanalar, sonlar va h.k.)
│  ├─ constants/               # Global konstantalar (APP_NAME, breakpoints va h.k.)
│  └─ types/                   # Global / shared TypeScript turlari
│
├─ features/                   # Domen bo‘yicha kesilgan modullar (vertical slices, DDDga yaqin)
│  ├─ auth/
│  │  ├─ api/                  # Login, register, refresh API chaqiriqlari
│  │  ├─ components/           # Auth’ga oid komponentlar (LoginForm, RegisterForm)
│  │  ├─ hooks/                # Auth bilan ishlovchi hook’lar (useAuth)
│  │  ├─ pages/                # Auth sahifalari (Login.page, Register.page)
│  │  ├─ models.ts             # Auth bilan bog‘liq DTO va entity turlari
│  │  └─ index.ts              # Barrel export (importlarni ixcham qilish uchun)
│  ├─ plates/
│  │  ├─ api/                  # Plates CRUD API (list, byId, create, update, remove)
│  │  ├─ components/           # PlateCard, PlateList va shu domen UI komponentlari
│  │  ├─ hooks/                # Plates uchun hook’lar (usePlatesList, useCreatePlate)
│  │  ├─ pages/                # Plates sahifalari (Plates.page, PlateDetail.page)
│  │  ├─ models.ts             # Plates uchun turlar
│  │  └─ index.ts
│  ├─ orders/
│  │  ├─ api/                  # Orders API
│  │  ├─ components/           # CartDrawer, OrderSummary kabi komponentlar
│  │  ├─ hooks/                # useCart, useOrders hook’lari
│  │  ├─ pages/                # Cart.page, Checkout.page sahifalari
│  │  ├─ models.ts             # Orders bilan bog‘liq turlar
│  │  └─ index.ts
│  └─ profile/
│     ├─ api/                  # Profile API
│     ├─ components/           # ProfileHeader, OrderHistoryTable
│     ├─ hooks/                # useProfile hook
│     ├─ pages/                # Profile.page sahifasi
│     ├─ models.ts             # Profile turlari
│     └─ index.ts
│
├─ theme/                      # MUI Theme markazlashtirilgan joy
│  ├─ index.ts                 # createTheme va ThemeProvider yig‘ilishi
│  ├─ palette.ts               # Rang sxemasi (brand ranglar, fon, text ranglar)
│  ├─ typography.ts            # Matn/shrift sozlamalari
│  └─ components.ts            # MUI komponentlarining global override va variantlari
│
├─ styles/                     # Global CSS fayllar
│  ├─ tailwind.css             # Tailwind CSS utilities (base components/utilities)
│  └─ globals.css              # Juda kam hollarda ishlatiladigan global qoidalar
│
├─ store/                      # Butun app bo‘yicha state boshqaruvi (zustand/redux)
│  └─ user.store.ts            # User bilan bog‘liq global state
│
├─ pages/                      # Juda ingichka (thin) top-level sahifalar (routing darajasida)
│  ├─ Home.page.tsx            # Bosh sahifa
│  └─ NotFound.page.tsx        # 404 sahifa


src/
├─ app/
│  ├─ App.tsx
│  ├─ main.tsx
│  ├─ routes.tsx
│  └─ providers/
│     ├─ ThemeProvider.tsx
│     ├─ QueryProvider.tsx
│     └─ I18nProvider.tsx
│
├─ core/
│  ├─ api/
│  │  ├─ apiClient.ts
│  │  └─ endpoints.ts
│  ├─ auth/
│  │  ├─ auth.guard.tsx
│  │  └─ token.ts
│  ├─ config/
│  │  └─ env.ts
│  ├─ errors/
│  │  ├─ ErrorBoundary.tsx
│  │  └─ errorMapping.ts
│  └─ storage/
│     └─ local.ts
│
├─ shared/
│  ├─ ui/
│  │  ├─ FormTextField.tsx
│  │  └─ Section.tsx
│  ├─ hooks/useDebounce.ts
│  ├─ utils/formatters.ts
│  ├─ constants/index.ts
│  └─ types/global.d.ts
│
├─ features/
│  ├─ auth/
│  │  ├─ api/auth.api.ts
│  │  ├─ components/LoginForm.tsx
│  │  ├─ hooks/useAuth.ts
│  │  ├─ pages/Login.page.tsx
│  │  ├─ models.ts
│  │  └─ index.ts
│  └─ plates/
│     ├─ api/plates.api.ts
│     ├─ components/PlateCard.tsx
│     ├─ hooks/usePlates.ts
│     ├─ pages/Plates.page.tsx
│     ├─ models.ts
│     └─ index.ts
│
├─ theme/
│  ├─ index.ts
│  ├─ palette.ts
│  ├─ typography.ts
│  └─ components.ts
│
├─ styles/
│  ├─ tailwind.css
│  └─ globals.css
│
├─ store/
│  └─ user.store.ts
│
├─ pages/
│  ├─ Home.page.tsx
│  └─ NotFound.page.tsx



#Info
Tushunarli qilaman 🙂. Sen ko‘rsatgan strukturada ikkita tushuncha bor: **core** va **features**.

# 🔹 1. `core/` (infrastructure & cross-cutting concerns)

👉 **Core** — bu **ilova yuragi**. Unda **infrastructure-level** kodlar bo‘ladi:
ya’ni, **umumiy, domenlarga tegishli bo‘lmagan**, lekin butun dastur ishlashi uchun zarur bo‘lgan narsalar.

### Misollar:

* **api/** → axios instance, request interceptors, base URL.

  * `apiClient.ts` — bitta umumiy axios/fetch client.
  * `endpoints.ts` — API endpointlarni markazlashtirish.

* **auth/** → global autentifikatsiya helperlari.

  * `auth.guard.tsx` — route guard (agar user login qilmagan bo‘lsa, `/login` ga redirect qiladi).
  * `token.ts` — tokenlarni olish, saqlash, yangilash funksiyalari.

* **config/** → muhit sozlamalari.

  * `env.ts` — `.env` fayldan typed konfiguratsiya olish.

* **errors/** → error handling.

  * `ErrorBoundary.tsx` — React Error Boundary.
  * `errorMapping.ts` — server xatolarini foydalanuvchi tiliga o‘girish.

* **storage/** → local/session storage helperlari.

  * `local.ts` — `getItem`, `setItem`, `removeItem` kabi wrapperlar.

📌 **Qisqa qilib:** `core/` ilovaga xizmat qiladigan umumiy servislar va “infrastructure-level components” joyi.

---

# 🔹 2. `features/` (vertical slices, domain-driven)

👉 **Features** — bu **domen modullari**. Har bir feature o‘z ichida **butunlay mustaqil** bo‘lishi kerak.
Masalan: `auth`, `plates`, `orders`, `profile`.

### Har bir feature ichida:

* **api/** → shu feature uchun API chaqiriqlari (`auth.api.ts`, `plates.api.ts`)
* **components/** → shu feature ichida ishlatiladigan komponentlar (`LoginForm`, `PlateCard`).
* **hooks/** → shu feature logic-ni boshqaradigan custom hooklar (`useAuth`, `usePlates`).
* **pages/** → shu feature bilan bog‘liq sahifalar (`Login.page.tsx`, `Plates.page.tsx`).
* **models.ts** → shu feature’ga oid TypeScript turlar/DTO lar (`Plate`, `Order`).
* **index.ts** → “barrel export” (importlarni ixchamlashtirish uchun).

📌 **Qisqa qilib:** `features/` — foydalanuvchi uchun ko‘rinadigan **ilova imkoniyatlari** (modules/domain slices).

---

# 🔍 Farqni misol bilan tushuntiraman

Masalan: foydalanuvchi `Plates` sahifasiga kiradi:

1. **UI** da → `Plates.page.tsx` (feature ichida) ishlaydi.
2. `usePlates` hook orqali API chaqiriladi → `features/plates/api/plates.api.ts`.
3. Bu API chaqiruvi **axios client** orqali ketadi → `core/api/apiClient.ts`.
4. Agar token kerak bo‘lsa → `core/auth/token.ts` dan olinadi.
5. Agar error chiqsa → `core/errors/ErrorBoundary.tsx` ishlaydi.

⚡ Ko‘rib turganingdek:

* **core/** → xizmat (infrastructure, umumiy qoidalar).
* **features/** → aniq domen (Auth, Plates, Orders).

---

# 🔹 3. `components/` bilan bog‘liq farq

* **features/** ichidagi `components/` → faqat shu modulga tegishli (masalan: `PlateCard` → faqat plates uchun).
* **shared/ui/** ichidagi komponentlar → **umumiy ishlatiladigan** komponentlar (`Button`, `DataTable`, `FormTextField`).

👉 Ya’ni:

* `features/auth/components/LoginForm.tsx` → faqat `auth` ishlatadi.
* `shared/ui/FormTextField.tsx` → barcha feature’lar ishlatishi mumkin.

---

✅ **Xulosa**:

* **core/** = butun app ishlashi uchun kerak bo‘lgan, domen bilan bog‘liq bo‘lmagan umumiy servis va helperlar.
* **features/** = domen (module) bo‘yicha guruhlangan, foydalanuvchiga ko‘rinadigan imkoniyatlar.
* **shared/** = umumiy qayta ishlatiladigan komponentlar/hooklar/util-lar.

---

Xohlaysanmi, men senga **Auth** va **Plates** modullarida `core` bilan qanday ishlashini diagramma shaklida chizib beray?

